import React, { useState, useEffect } from "react";
import {
  Modal,
  TextField,
  Button,
  Typography,
  InputAdornment,
  FormControlLabel,
  Checkbox,
  Box,
  IconButton,
  Tooltip,
} from "@mui/material";
import Grid from "@mui/material/Grid2";
import algosdk from "algosdk";
import { PeraWalletConnect } from "@perawallet/connect";
import ContentCopyIcon from "@mui/icons-material/ContentCopy"; // Icon for copy
import { ShowToastMessage } from "utils/ShowToastMessage";
import configs from "configs";
const peraWallet = new PeraWalletConnect();
const algodToken = ""; // Thay b·∫±ng API key c·ªßa Algorand node
const algodServer = configs.ALGORAND_SERVER;
const algodPort = configs.ALGORAND_SERVER_PORT;

const algodClient = new algosdk.Algodv2(algodToken, algodServer, algodPort);
const DonateModal = ({
  open,
  handleCloseModal,
  walletAddress: walletAddressOfProject,
}) => {
  const [anonymous, setAnonymous] = useState(false);
  const [donationAmount, setDonationAmount] = useState("");
  const [usdEquivalent, setUsdEquivalent] = useState(""); // State for VND
  const [walletConnected, setWalletConnected] = useState(false);
  const [userAddress, setUserAddress] = useState(null);
  const [exchangeRate, setExchangeRate] = useState(0); // T·ª∑ gi√° ALGO/VND

  useEffect(() => {
    // L·∫•y t·ª∑ gi√° h·ªëi ƒëo√°i t·ª´ CoinGecko API
    const fetchExchangeRate = async () => {
      try {
        const response = await fetch(
          "https://api.coingecko.com/api/v3/simple/price?ids=algorand&vs_currencies=VND"
        );
        const data = await response.json();
        setExchangeRate(data.algorand.vnd); // L∆∞u t·ª∑ gi√° v√†o state
      } catch (error) {
        console.error("L·ªói khi l·∫•y t·ª∑ gi√°:", error);
      }
    };

    fetchExchangeRate();
  }, []);

  const handleAnonymousChange = (event) => {
    setAnonymous(event.target.checked);
  };

  const handleDonationChange = (event) => {
    let vndAmount = event.target.value;

    // Lo·∫°i b·ªè d·∫•u ch·∫•m v√† d·∫•u ph·∫©y ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c s·ªë nguy√™n
    vndAmount = vndAmount.replace(/[,.]/g, "");

    setDonationAmount(vndAmount);

    // T√≠nh to√°n s·ªë ti·ªÅn ALGO t∆∞∆°ng ·ª©ng
    if (!isNaN(vndAmount) && vndAmount > 0) {
      const algoAmount = (vndAmount / exchangeRate).toFixed(6); // Chuy·ªÉn ƒë·ªïi VND sang ALGO
      setUsdEquivalent(algoAmount);
    } else {
      setUsdEquivalent("");
    }
  };

  // ƒê·ªãa ch·ªâ v√≠ qu·ªπ
  const fundWalletAddress =
    walletAddressOfProject ||
    "MQZFSTFJAI7FYMHNGQBIBQ3WKM4SYHJFYILT6MNM5B65I7DNQONCEVKOOA";

  // Ng·∫Øt k·∫øt n·ªëi khi component ƒë∆∞·ª£c mount
  // useEffect(() => {
  //   const disconnectWallet = async () => {
  //     if (walletConnected) {
  //       await peraWallet.disconnect();
  //       setWalletConnected(false);
  //       setUserAddress(null);
  //     }
  //   };

  //   disconnectWallet();

  //   // Cleanup function ƒë·ªÉ ng·∫Øt k·∫øt n·ªëi khi component unmount
  //   return () => {
  //     disconnectWallet();
  //   };
  // }, []); // Ch·ªâ ch·∫°y m·ªôt l·∫ßn khi component ƒë∆∞·ª£c mount

  useEffect(() => {
    // Reconnect to the session when the component is mounted

    peraWallet
      .reconnectSession()
      .then((accounts) => {
        // Setup the disconnect event listener
        peraWallet.connector?.on("disconnect", handleDisconnectWallet);

        if (peraWallet.isConnected && accounts.length) {
          setUserAddress(accounts[0]);
          setWalletConnected(true);
        }
      })
      .catch((error) => {
        console.error("Error reconnecting the session:", error);
      });
  }, []);

  // Thi·∫øt l·∫≠p k·∫øt n·ªëi v·ªõi Pera Wallet
  const connectWallet = async () => {
    try {
      const accounts = await peraWallet.connect();
      peraWallet.connector?.on("disconnect", handleDisconnectWallet);
      setUserAddress(accounts[0]);
      setWalletConnected(true);
      console.log("üöÄ ~ connectWal ~ accounts:", accounts);
    } catch (error) {
      console.error("L·ªói k·∫øt n·ªëi v√≠:", error);
    }
  };

  const handleDisconnectWallet = () => {
    peraWallet.disconnect();
    setWalletConnected(false);
    setUserAddress(null);
  };

  const sendTransaction = async () => {
    if (!walletConnected) {
      alert("B·∫°n c·∫ßn k·∫øt n·ªëi v·ªõi v√≠ tr∆∞·ªõc!");
      return;
    }
    console.log("üöÄ ~ sendTransaction ~ fundWalletAddress:", fundWalletAddress);
    if (!fundWalletAddress) {
      alert("ƒê·ªãa ch·ªâ v√≠ d·ª± √°n kh√¥ng h·ª£p l·ªá!");
      return;
    }
    if (!userAddress) {
      alert("ƒê·ªãa ch·ªâ v√≠ c·ªßa b·∫°n kh√¥ng h·ª£p l·ªá!");
      return;
    }
    console.log("üöÄ ~ sendTransaction ~ userAddress:", userAddress);

    async function getNodeStatus() {
      try {
        const status = await algodClient.status().do();
        console.log("Node status:", status);
      } catch (err) {
        console.error("Failed to get node status:", err);
      }
    }

    // Call the function to print the node status
    getNodeStatus();

    const acctInfo = await algodClient
      .accountInformation(fundWalletAddress)
      .do();

    const acctInfoUser = await algodClient.accountInformation(userAddress).do();
    console.log(`Account balance: ${acctInfo.amount} microAlgos`);
    console.log(
      `Account balance userAddress: ${acctInfoUser.amount} microAlgos`
    );
    if (parseFloat(usdEquivalent) <= 0 || isNaN(parseFloat(usdEquivalent))) {
      alert("S·ªë ti·ªÅn quy√™n g√≥p kh√¥ng h·ª£p l·ªá!");
      return;
    }

    console.log("üöÄ ~ sendTransaction ~ usdEquivalent:", usdEquivalent);
    const suggestedParams = await algodClient.getTransactionParams().do();
    console.log("Suggested Params:", suggestedParams);

    const txGroups = await generatePaymentTxns({
      sender: userAddress,
      receiver: fundWalletAddress,
      amountAlgo: parseInt(usdEquivalent * 1000000, 10),
    });
    console.log("Transaction:", txGroups);
    try {
      const signedTxn = await peraWallet.signTransaction([txGroups]);
      console.log("Signed Transaction:", signedTxn);
      handleCloseModal();
      const { txId } = await algodClient.sendRawTransaction(signedTxn).do();
      console.log(`txns signed successfully! - txID: ${txId}`);
      ShowToastMessage({
        title: "Payment Transaction",
        message: `Giao d·ªãch th√†nh c√¥ng! - txID: ${txId}`,
        type: "success",
      });
      // alert("Giao d·ªãch th√†nh c√¥ng!");
    } catch (error) {
      console.log("Couldn't sign payment txns", error);
      alert("Giao d·ªãch th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  const copyToClipboard = () => {
    navigator.clipboard
      .writeText(fundWalletAddress)
      .then(() => {
        alert("ƒê√£ sao ch√©p ƒë·ªãa ch·ªâ v√≠ v√†o clipboard!"); // Show success message
      })
      .catch((err) => {
        console.error("Failed to copy: ", err);
      });
  };

  return (
    <Modal open={open} onClose={handleCloseModal}>
      <div
        style={{
          padding: "20px",
          backgroundColor: "#fff",
          margin: "100px auto",
          width: "35rem",
          borderRadius: "10px",
        }}
      >
        <Typography variant="h6" component="h2" gutterBottom>
          - ƒê·ªãa ch·ªâ v√≠ c·ªßa D·ª± √°n:
        </Typography>
        <Box sx={{ display: "flex", justifyContent: "space-between" }}>
          <Typography
            variant="h7"
            component="h2"
            gutterBottom
            sx={{
              wordWrap: "break-word",
              fontWeight: "bold",
              width: "80%",
            }}
          >
            {fundWalletAddress}
            {/* Add an icon button for copying */}
          </Typography>
          <Tooltip title="Sao ch√©p ƒë·ªãa ch·ªâ v√≠">
            <IconButton onClick={copyToClipboard} sx={{ ml: 1 }}>
              <ContentCopyIcon />
            </IconButton>
          </Tooltip>
        </Box>
        <Typography variant="h6" component="h2" gutterBottom>
          - Nh·∫≠p Th√¥ng Tin ·ª¶ng H·ªô
        </Typography>
        <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>
          <Grid size={6}>
            <TextField
              label="H·ªç v√† t√™n"
              variant="outlined"
              fullWidth
              required
              disabled={anonymous}
            />
          </Grid>
          <Grid size={6}>
            <TextField
              label="S·ªë ƒëi·ªán tho·∫°i"
              variant="outlined"
              fullWidth
              required
              disabled={anonymous}
            />
          </Grid>

          <Grid size={6}>
            <TextField
              label="ƒê·ªãa ch·ªâ"
              variant="outlined"
              fullWidth
              required
              disabled={anonymous}
            />
          </Grid>
          <Grid size={6}>
            <TextField
              label="ƒê·ªãa ch·ªâ Email"
              variant="outlined"
              fullWidth
              required
              disabled={anonymous}
            />
          </Grid>
        </Grid>

        <FormControlLabel
          control={
            <Checkbox
              checked={anonymous}
              onChange={handleAnonymousChange}
              name="anonymous"
            />
          }
          label="·ª¶ng h·ªô ·∫©n danh"
        />

        {/* TextField nh·∫≠p ti·ªÅn VND */}
        <TextField
          label="S·ªë ti·ªÅn quy√™n g√≥p (VND)"
          variant="outlined"
          fullWidth
          margin="normal"
          value={donationAmount}
          onChange={handleDonationChange}
          helperText={"V√≠ d·ª• s·ªë ti·ªÅn: 50.000"}
          required
          InputProps={{
            endAdornment: <InputAdornment position="end">ƒë</InputAdornment>,
          }}
        />

        {/* Hi·ªÉn th·ªã s·ªë ti·ªÅn ALGO t∆∞∆°ng ·ª©ng */}
        {usdEquivalent && (
          <Typography variant="body2" color="textSecondary" gutterBottom>
            S·ªë ti·ªÅn t∆∞∆°ng ·ª©ng: {usdEquivalent} ALGO
          </Typography>
        )}

        {/* K·∫øt n·ªëi v√≠ */}
        {walletConnected && (
          <Typography
            variant="body2"
            color="green"
            gutterBottom
            sx={{ wordWrap: "break-word" }}
          >
            V√≠ ƒë√£ k·∫øt n·ªëi: {userAddress}
          </Typography>
        )}
        <Button
          variant="contained"
          color={walletConnected ? "secondary" : "success"}
          fullWidth
          onClick={!!userAddress ? handleDisconnectWallet : connectWallet}
        >
          {!!userAddress ? "hu·ª∑ k·∫øt n√¥i" : "K·∫øt n·ªëi Pera Wallet"}
        </Button>

        {/* G·ª≠i giao d·ªãch */}
        <Button
          variant="contained"
          color="primary"
          fullWidth
          onClick={sendTransaction}
          sx={{ mt: 2 }}
        >
          G·ª≠i Th√¥ng Tin
        </Button>
      </div>
    </Modal>
  );
};

export default DonateModal;
async function generatePaymentTxns({ receiver, sender, amountAlgo }) {
  const suggestedParams = await algodClient.getTransactionParams().do();

  const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({
    sender,
    receiver,
    amount: amountAlgo || 1,
    suggestedParams,
  });

  return [{ txn, signers: [sender] }];
}
